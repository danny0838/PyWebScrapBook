name: Build and Release

on:
  workflow_dispatch:

jobs:
  configure:
    runs-on: ubuntu-latest
    environment: production

    outputs:
      VERSION: ${{ steps.config.outputs.VERSION }}

    env:
      TIMEZONE: ${{ vars.TIMEZONE || 'UTC' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure and verify
        id: config
        run: |
          VERSION=$(grep -oP "^__version__\s*=\s*['\"]\K[^'\"]+" webscrapbook/__init__.py)

          EXPECTED_LINE="## [$VERSION] - $(TZ="$TIMEZONE" date +%Y-%m-%d)"
          if ! grep -Fxq "$EXPECTED_LINE" CHANGELOG.md; then
            echo "❌ Missing expected changelog line: $EXPECTED_LINE"
            exit 1
          fi

          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: pip install .[dev]

      - name: Verify no code issue
        run: flake8 .

  build-windows:
    runs-on: windows-latest
    needs: configure
    environment: production

    strategy:
      matrix:
        arch: [x86, x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: ${{ matrix.arch }}

      - name: Install dependencies
        run: pip install .

      - name: Compile
        run: tools\compile

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: webscrapbook-${{ needs.configure.outputs.VERSION }}-py3-win-${{ matrix.arch }}
          path: dist\wsb

      - name: Compile (onefile)
        run: tools\compile --onefile

      - name: Upload artifact (onefile)
        uses: actions/upload-artifact@v4
        with:
          name: webscrapbook-${{ needs.configure.outputs.VERSION }}-py3-win-${{ matrix.arch }}-onefile
          path: dist\wsb.exe

  release:
    runs-on: ubuntu-latest
    needs: [configure, build-windows]
    environment: production

    # Add explicit permissions for tag/release
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Git tag
        run: |
          git tag --force ${{ needs.configure.outputs.VERSION }}
          git push origin ${{ needs.configure.outputs.VERSION }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: ZIP artifacts
        run: |
          for dir in dist/*/; do
            name=$(basename "$dir")
            (cd "$dir" && zip -r "../${name}.zip" .)
          done

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          name: PyWebScrapBook ${{ needs.configure.outputs.VERSION }}
          tag_name: ${{ needs.configure.outputs.VERSION }}
          draft: false
          prerelease: false
          make_latest: 'legacy'  # mark latest for a release with larger version
          generate_release_notes: true
          files: dist/*

  publish:
    runs-on: windows-latest
    needs: release
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: tools\publish-pypi
